{"version":3,"sources":["components/Card/index.js","components/Navbar/index.js","components/Button/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","id","name","occupation","department","location","Nav","Button","for","value","activeDepartment","onChange","e","handleChange","map","dept","key","type","onClick","search","sortedNames","App","state","employees","sortOrder","sorted","console","log","filter","i","length","push","setState","target","handleSorting","sort","a","b","localeCompare","this","selectDept","select","employee","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"m0CA0BeA,MAvBf,SAAcC,GACZ,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,WACb,4BACE,wBAAIC,GAAG,YACJF,EAAMG,MAET,4BACE,+CADF,IACgCH,EAAMI,YAEtC,4BACE,+CADF,IACgCJ,EAAMK,YAEtC,4BACE,6CADF,IAC8BL,EAAMM,c,MCL/BC,MAVf,WACI,OACI,6BACI,yBAAKN,UAAU,UACX,0BAAMA,UAAU,wBAAhB,yB,MCqBDO,MAzBf,SAAgBR,GACZ,OACI,6BACI,8BACI,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,uBACX,2BAAOA,UAAU,mBAAmBQ,IAAI,sBAAxC,eAEJ,4BAAQC,MAAOV,EAAMW,iBAAkBV,UAAU,gBAAgBC,GAAG,qBAAqBU,SAAU,SAACC,GAAD,OAAOb,EAAMc,aAAaD,KACzH,6CACCb,EAAMK,WAAWU,KAAI,SAAAC,GAAI,OACtB,4BAAQC,IAAKjB,EAAME,GAAIQ,MAAOM,GAAOA,OAI7C,yBAAKf,UAAU,sBACV,4BAAQiB,KAAK,SAASjB,UAAU,iBAAiBkB,QAASnB,EAAMoB,QAAhE,aAIb,uBAAGnB,UAAU,QAAO,4BAAQiB,KAAK,SAASjB,UAAU,eAAekB,QAASnB,EAAMqB,aAA9D,eC0DjBC,G,kNAzEbC,MAAQ,CACNpB,KAAM,CAAC,aAAc,QAAS,iBAAkB,aAChDQ,iBAAkB,SAClBa,UAAWA,EACXC,UAAW,YACXC,QAAQ,G,EAGVN,OAAS,WACPO,QAAQC,IAAI,UAGZ,IADA,IAAIC,EAAS,GACJC,EAAE,EAAGA,EAAEN,EAAUO,OAAQD,IAC5B,EAAKP,MAAMZ,mBAAqBa,EAAUM,GAAGzB,YAC/CwB,EAAOG,KAAKR,EAAUM,IAG1BH,QAAQC,IAAIC,GACZ,EAAKI,SAAS,CACZT,UAAWK,IAEbF,QAAQC,IAAI,EAAKL,Q,EAGnBT,aAAe,SAACD,GAId,EAAKoB,SAAS,CACZtB,iBAAkBE,EAAEqB,OAAOxB,S,EAI/ByB,cAAgB,WAEd,GADA,EAAKF,SAAS,CAAEP,QAAQ,KACE,IAAtB,EAAKH,MAAMG,OACE,EAAKH,MAAMC,UAAUY,MAAO,SAACC,EAAGC,GAE/C,OAD6C,cAAzB,EAAKf,MAAME,UAA6B,GAAK,GAC7CY,EAAElC,KAAKoC,cAAcD,EAAEnC,U,uDAM7C,OACE,yBAAKF,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACf,kBAAC,EAAD,CACAI,WAAYmC,KAAKjB,MAAMpB,KACvBiB,OAAQoB,KAAKpB,OACbqB,WAAYD,KAAKE,OACjB5B,aAAgB0B,KAAK1B,aACrBH,iBAAoB6B,KAAKjB,MAAMZ,iBAC/BU,YAAemB,KAAKL,gBAElB,yBAAKlC,UAAU,OACZuC,KAAKjB,MAAMC,UAAUT,KAAI,SAAA4B,GAAQ,OAChC,kBAAC,EAAD,CACExC,KAAMwC,EAASxC,KACfC,WAAYuC,EAASvC,WACrBC,WAAYsC,EAAStC,WACrBC,SAAUqC,EAASrC,qB,GA/DjBsC,IAAMC,YCKJC,QACW,cAA7BC,OAAOzC,SAAS0C,UAEe,UAA7BD,OAAOzC,SAAS0C,UAEhBD,OAAOzC,SAAS0C,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.bb9f894c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"content\">\n        <ul>\n          <li id=\"employee\">\n            {props.name}\n          </li>\n          <li>\n            <strong>Occupation:</strong> {props.occupation}\n          </li>\n          <li>\n            <strong>Department:</strong> {props.department}\n          </li>\n          <li>\n            <strong>Location:</strong> {props.location}\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav() {\n    return (\n        <div>\n            <nav className=\"navbar\">\n                <span className=\"navbar-brand mb-0 h1\">Employee Directory</span>\n            </nav>\n        </div>\n    );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Button(props) {\n    return (\n        <div>\n            <form>\n                <div className=\"input-group mb-3\">\n                    <div className=\"input-group-prepend\">\n                        <label className=\"input-group-text\" for=\"inputGroupSelect01\">Department</label>\n                    </div>\n                    <select value={props.activeDepartment} className=\"custom-select\" id=\"inputGroupSelect01\" onChange={(e) => props.handleChange(e)}>\n                        <option>Select...</option>\n                        {props.department.map(dept => (\n                            <option key={props.id} value={dept}>{dept}</option>\n                        ))}\n                        \n                    </select>\n                    <div className=\"input-group-append\">\n                         <button type=\"button\" className=\"btn search-btn\" onClick={props.search}>Search</button>\n                    </div>\n                </div>\n            </form>\n            <p className=\"sort\"><button type=\"button\" className=\"btn sort-btn\" onClick={props.sortedNames}>Sort A-Z</button></p>\n        </div>\n    );\n}\n\nexport default Button;\n\n","import React from 'react';\nimport employees from \"./employees.json\";\nimport Card from \"./components/Card\";\nimport Nav from \"./components/Navbar\";\nimport Button from \"./components/Button\";\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    name: [\"Accounting\", \"Sales\", \"Administrative\", \"Corporate\"],\n    activeDepartment: \"Select\",\n    employees: employees,\n    sortOrder: \"ascending\",\n    sorted: false\n  }\n\n  search = () => {\n    console.log(\"search\")\n\n    var filter = []\n    for (let i=0; i<employees.length; i++) {\n      if (this.state.activeDepartment === employees[i].department) {\n        filter.push(employees[i])\n      }\n    }\n    console.log(filter)\n    this.setState({\n      employees: filter\n    })\n    console.log(this.state)\n  }\n\n  handleChange = (e) => {\n    // console.log(e.target)\n    // console.log(e.value)\n\n    this.setState({\n      activeDepartment: e.target.value\n    })\n  }\n\n  handleSorting = () => {\n    this.setState({ sorted: true });\n    if (this.state.sorted === true) {\n      const sorted = this.state.employees.sort ( (a, b) => {\n      const isReversed = (this.state.sortOrder === \"ascending\") ? 1 : -1;\n      return isReversed * a.name.localeCompare(b.name)\n       })\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Nav />\n        <div className=\"container\">\n        <Button \n        department={this.state.name}\n        search={this.search}\n        selectDept={this.select}\n        handleChange = {this.handleChange}\n        activeDepartment = {this.state.activeDepartment}\n        sortedNames = {this.handleSorting}\n        />\n          <div className=\"row\">\n            {this.state.employees.map(employee => (\n              <Card\n                name={employee.name}\n                occupation={employee.occupation}\n                department={employee.department}\n                location={employee.location}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}